Container search_optimum_path
{
	Container ManageAltLinkGeneration: IsTemplate = "True"
	{
		
		unit<uint32> Zones;
		
		parameter<Zones>	fromZone: 	expr = "33"; // zoneofAmsterdam
		parameter<Zones> 	toZone:		expr = "541"; // zone of Maastricht
		
		parameter<float32> max_dist;
		
		unit<uint32> inBaseNetwork;
		unit<uint32> inNodeSet;	
		
		container length_optimization_path: 	expr = "genAlternativeLinks(Zones, fromZone, toZone, inBaseNetwork, inNodeSet)";
		
		unit<uint32> bestlinks: expr = "length_optimization_path/bestlinks";
		
		unit<uint32> newNetwork: expr = "inBaseNetwork"
		{
			attribute<bool>	   upgrade: 			expr = "!IsNull(rlookup(id(.), bestLinks/Nr_OrgEntity)) || inBaseNetwork/upgrade"; 
			attribute<float32> impedance: 			expr = "upgrade ? inBaseNetwork/dij / PTSpeed : inBaseNetwork/impedance";
			attribute<float32> ConstructionCosts:	expr = "upgrade ? float32(1) : inBaseNetwork/ConstructionCosts";
			attribute<uint16>  Step:				expr = "upgrade && !inBaseNetwork/upgrade ? CurrStep : inBaseNetwork/Step";
			attribute<float32> upgr_length:			expr = "(inBaseNetwork/dij / float32(1000)) * float32(upgrade)";
		}
		
		unit<uint32> newNodeSet: expr = "inNodeSet"
		{
			attribute<float32> Connected: expr = "max_elem(max(float32(newNetwork/upgrade), newNetwork/F1), max(float32(newNetwork/upgrade), newNetwork/F2))";
		}
		
		unit<uint32> ZoneCheck: expr = "Zones"
		{
			attribute<float32> Connected: 	expr = "newNodeSet/Connected[inBaseNetwork/Entrypoint]";
			attribute<float32> ConnPop:		expr = "float32(Pop) * Connected";
		}
		unit<uint32> Destinations: expr = "subset(ZoneCheck/Connected > float32(0))"
		{
			attribute<CoordSys> 	Point: 		expr = "Zones/Point[Nr_OrgEntity]";
			attribute<int32> 	Pop:		expr = "Zones/Pop[Nr_OrgEntity]";
			attribute<newNodeSet> 	EntryPoint:	expr = "Zones/EntryPoint[Nr_OrgEntity]";
			attribute<Zones>	LinkUp:		expr = "Nr_OrgEntity";
		}
		
		parameter<uint16> 	CurrStep: 		expr = "MakeDefined(NrIter + uint16(1), uint16(0))";
		parameter<float32> 	ConnectedPop:	expr = "sum(ZoneCheck/ConnPop) / sum(float32(Zones/Pop))";
		parameter<float32>	NetworkLength: 	expr = "sum(newNetwork/upgr_length)";
		parameter<float32>	TargetValue:	expr = "ConnectedPop";
	}
	
	
	Container genAlternativeLinks: IsTemplate = "true"
	{
		// later in template	
		unit<uint32> Zones;
		
		parameter<Zones>	fromZone: 	expr = "33"; // zone of Amsterdam
		parameter<Zones> 	toZone:		expr = "541"; // zone of Maastricht
		
		unit<uint32> inBaseNetwork;
		unit<uint32> inNodeSet;
		
		attribute<float32> LinkBenefits (inBaseNetwork): expr = "inBaseNetwork/ConstructionBenefits + float32(1)";
		attribute<float32> LinkCosts	(inBaseNetwork): expr = "inBaseNetwork/ConstructionCosts";
		attribute<float32> LinkLength	(inBaseNetwork): expr = "inBaseNetwork/length / float32(1000)";
		attribute<float32> LinkBCR		(inBaseNetwork): expr = "LinkBenefits / LinkCosts";
		
		container init 
		{
			unit<uint32> BaseNetwork: 	expr = "inBaseNetwork";	
			unit<uint32> NodeSet:	 	expr = "inNodeSet";
		
			parameter<float32> best_routing_value: expr = "routing_value";
			parameter<float32> routing_value:	expr = "DefLinks/DefLinks/Dist < max_dist ? sum(DefLinks/Deflinks/benefits) / sum(Deflinks/Deflinks/costs) : float32(1) / sum(DefLinks/DefLinks/length)^float32(2)";
			parameter<uint16>  bestIter:		expr = "uint16(0 / 0)";
			parameter<uint16>  bestGeoEfficiencyIter: expr = "bestIter";
				
			//container fromNodes: 	expr = "selectNodeInZone(BaseNetwork, NodeSet, Zones, fromZone, toZone)";
			//container toNodes:		expr = "selectNodeInZone(BaseNetwork, NodeSet, Zones, toZone, fromZone)";
			
			parameter<NodeSet> fromNode: 	expr = "inBaseNetwork/EntryPoint[fromZone]";
			attribute<uint32> toNode	(NodeSet):		expr = "uint32(Id(NodeSet) = inBaseNetwork/EntryPoint[toZone])";
			
			attribute<float32> proto_nodeset (NodeSet): 	expr = "dijkstra_s('bidirectional;startPoint(Node_rel);node:TraceBack', BaseNetwork/length, BaseNetwork/F1, BaseNetwork/F2, fromNode)";
			
			//attribute<float32> 	proto_nodeset (NodeSet): 	expr = "dijkstra(BaseNetwork/length, BaseNetwork/F1, BaseNetwork/F2, fromNode)";
			attribute<uint32> 	protoLinks (BaseNetwork): 	expr = "trace_back(BaseNetwork/F1, BaseNetwork/F2, proto_nodeset/TraceBack, toNode)";	
			
			container DefLinks: expr = "getDefLinks()";
			//container InvestmentAttractiveness: expr = "EvalAttractiveness(DefLinks/DefLinks, DefLinks/DefLinks/ConnZones)";
		}	
		
		container getBestRoute: expr = "loop(CallRoutingLoop, uint16(10))";
		
		// get links for each link into one collection here.
		unit<uint32> bestlinks: expr = "getBestRoute/LastIter/refBestIter";
	}
	
	container CallRoutingLoop: isTemplate = "True"
	{
		parameter<uint16> NrIter;
		container currValue;
	    container nextValue;
		
	    unit<uint32> BaseNetwork: 	expr = "= previousIter + '/BaseNetwork'";
	    unit<uint32> NodeSet:		expr = "= previousIter + '/NodeSet'";
	    
	    parameter<float32> best_routing_value:			expr = "= 'iif('+ previousIter +'/best_routing_value < routing_value, routing_value, '+ previousIter +'/best_routing_value)'";
	    //parameter<float32> routing_value:	expr = "iif(DefLinks/DefLinks/Dist < max_dist, (sum(DefLinks/DefLinks/ConnZones/ConnMarket) / sum(Deflinks/Deflinks/costs)), float32(1) / (sum(DefLinks/DefLinks/length)^float32(2)))";
	    parameter<float32> routing_value:	expr = "DefLinks/DefLinks/Dist < max_dist ? sum(DefLinks/Deflinks/benefits) / sum(Deflinks/Deflinks/costs) : float32(1) / sum(DefLinks/DefLinks/length)^float32(2)";
	    parameter<string>  previousIter: 				expr = "iif(NrIter = Uint16(0), 'init', 'iter' + string(NrIter - uint16(1)))";
	    parameter<uint16>  bestIter:					expr = "= 'iif('+ previousIter +'/best_routing_value < routing_value, NrIter, ' + previousIter + '/bestIter)'"; 
	    unit<uint32> 	   refBestIter: 				expr = "= (IsNull(bestIter) ? 'init' : 'iter' + string(bestIter)) + '/DefLinks/DefLinks'";
	    
		//parameter<NodeSet> fromNode: 	expr = "inBaseNetwork/EntryPoint[fromZone]";
		parameter<NodeSet> fromNode: 	expr = "init/fromNode";
		//attribute<uint32> toNode	(NodeSet):		expr = "uint32(Id(NodeSet) = inBaseNetwork/EntryPoint[toZone])";
		attribute<uint32> toNode	(NodeSet):		expr = "init/toNode";
			
		parameter<float32> power: 						expr = "float32(0.0) + (float32(NrIter) / float32(10))";
		attribute<float32> proto_impedance	(BaseNetwork): expr = "MakeDefined(LinkBCR^(float32(1) - power) / LinkLength, float32(1))";
		attribute<float32> impedance		(BaseNetwork):  expr = "float32(1) / proto_impedance";
		attribute<float32> proto_nodeset (NodeSet): 	expr = "dijkstra_s('bidirectional;startPoint(Node_rel);node:TraceBack', impedance, BaseNetwork/F1, BaseNetwork/F2, fromNode)";
		attribute<uint32> 	protoLinks (BaseNetwork): 	expr = "trace_back(BaseNetwork/F1, BaseNetwork/F2, proto_nodeset/TraceBack, toNode)";		
		
	    container DefLinks: expr = "getDefLinks()";
//	    container InvestmentAttractiveness: expr = "EvalAttractiveness(DefLinks/DefLinks, DefLinks/DefLinks/ConnZones)";
	}
	
	container EvalAttractiveness: IsTemplate = "True"
	{
		unit<uint32> Lines;
		unit<uint32> AllZones;
		
		unit<uint32> ConnZones: expr = "subset(AllZones/conn > float32(0))", DialogData = "point", DialogType = "map"
		{
			attribute<CoordSys> centroid: expr = "AllZones/centroid[Nr_OrgEntity]";
			attribute<float32>  Market:expr = "AllZones/ConnMarket[Nr_OrgEntity]";
		}
		unit<uint32> LocalNetwork: expr = "connect(Lines/line, ConnZones/centroid)", DialogData = "line", DialogType = "map"
		{
			attribute<CoordSys> line (arc): expr = "UnionData";
			attribute<m>  		length:		expr = "arc_length(line, m)";
			attribute<s>  		traveltime: expr = "IsNull(Nr_OrgEntity) ? length / params/TrainSpeed : (length / params/WalkSpeed) + WaitingSeconds";
			attribute<CoordSys> frompoint: 	expr = "first_node(line)";
			attribute<CoordSys> topoint:	expr = "last_node(line)";
			
			unit<uint32> pointset: 	expr = "union_unit(LocalNetwork, LocalNetwork)" {attribute<CoordSys> points: expr = "union_data(., frompoint, topoint)";}
			unit<uint32> nodeset: 	expr = "unique(pointset/points)";
			
			attribute<nodeset> F1: expr = "rlookup(frompoint, nodeset/values)";
			attribute<nodeset> F2: expr = "rlookup(topoint, nodeset/values)";
			attribute<nodeset> zoneid (ConnZones): expr = "rlookup(ConnZones/centroid, nodeset/values)";
			
			
			unit<uint32> comp_flows: expr = "dijkstra_od(length, F1, F2, zoneid, const(0, ConnZones, m), id(ConnZones), zoneid, const(0, ConnZones, m), id(ConnZones))"
			{
				attribute<ConnZones> i:  		expr = "ConnZones/Nr_OrgEntity[rlookup(id(.) / #ConnZones, id(ConnZones))]";
  				attribute<ConnZones> j: 		expr = "ConnZones/Nr_OrgEntity[rlookup(mod(id(.), #ConnZones), id(ConnZones))]";
  				attribute<upoint>	 from_to:	expr = "point(i, j, upoint)";
  				attribute<float32>	 L1ij: 		expr = "value(Impedance, float32)";
  				attribute<s> 		 c1ij:		expr = "i <> j ? (Impedance / TrainSpeed) + (WaitingSeconds + WaitingSeconds) : value(0, s)";
			}
		}
		unit<uint32> oth_ODMatrix: expr = "ODMatrix", ExplicitSuppliers = "LocalNetwork/comp_flows;"
		{
			attribute<LocalNetwork/comp_flows> selnet_id: 	expr = "rlookup(from_to, LocalNetwork/comp_flows/from_to)";
			attribute<s> c2ij: 	expr = "MakeDefined(min_elem(ODMatrix/c0ij, LocalNetwork/comp_flows/c1ij[selnet_id]), c0ij)";
			attribute<s> dc2ij: expr = "c0ij - c2ij";
			attribute<float32>	Lij2:						expr = "MakeDefined(float32(LocalNetwork/comp_flows/L1ij[selnet_id]), WalkNetworkDist)";
			attribute<float32>  dLij2:						expr = "Lij2 - WalkNetworkDist";
			attribute<float32> 	Tij2:						expr = "FlowsF1ij/Matrix/Tij";
			attribute<float32>  dTij2:						expr = "Tij2 - Tij0";
			attribute<float32> 	PK2ij:						expr = "Tij2 * Lij2";
			attribute<float32>  dPK2ij:						expr = "dTij2 * Lij2";
			
			container FlowsF1ij: expr = "getFlows_ij(oth_ODMatrix, c2ij, from_market, to_market)";
			
		}
		
		parameter<float32> dPKij: expr = "sum(oth_ODMatrix/PK2ij)";
		
	}
	container getDefLinks: IsTemplate = "True"
	{
		unit<uint32> DefLinks: expr = "subset(protoLinks > 0)", DialogData = "line", DialogType = "map"
		{	
			attribute<float32>	benefits:	expr = "LinkBenefits[Nr_OrgEntity]";
			attribute<CoordSys> line (arc):	expr = "BaseNetwork/line[Nr_OrgEntity]";
			attribute<float32>	length: 	expr = "BaseNetwork/length[Nr_OrgEntity]";
			attribute<float32>	costs: 		expr = "LinkCosts[Nr_OrgEntity]";
			//attribute<uint32>	LinkType:	expr = "BaseNetwork/LinkType[Nr_OrgEntity]";
			attribute<CoordSys>	frompoint:	expr = "first_node(line)";
			attribute<CoordSys> topoint:	expr = "last_node(line)";
			attribute<float32>  realcosts:	expr = "LinkCosts[Nr_OrgEntity]";
			attribute<float32>  imp:		expr = "impedance[Nr_OrgEntity]";
			
			unit<uint32>	PointSet: 	expr = "union_unit(DefLinks, DefLinks)" { attribute<CoordSys>	Points: expr = "union_data(PointSet, frompoint, topoint)"; } 
			unit<uint32> 	NodeSet: 	expr = "unique(PointSet/Points)" 		{ attribute<CoordSys>	Values; } //  attribute<Zones> inZone: expr = "point_in_polygon(Values, Zones/vlak)"; attribute<float32> dist_f_centr: expr = "dist(Values, SourceData/Zones/centroid[fromZone])"; attribute<float32> dist_t_centr: expr = "dist(Values, SourceData/Zones/centroid[toZone])";}
			//unit<uint32> 	Distances: 	expr = "combine(NodeSet, NodeSet)" 		{ attribute<float32> GeoDist: expr = "sqrt(sqr(pointrow(NodeSet/Values[nr_1]) - pointrow(NodeSet/Values[nr_2])) + sqr(pointcol(NodeSet/Values[nr_1]) - pointcol(NodeSet/Values[nr_2])))";}
			
			unit<uint32> ConnZones: expr = "Zones" {attribute<float32> conn: expr = "float32(pcount(NodeSet/inZone) > 0)"; attribute<float32> Pop: expr = "float32(Zones/Population)"; attribute<float32> ConnMarket: expr = "Saturation * conn * Pop";}
			
			parameter<float32> GeoEfficiency: 	expr = "Dist / float32(dist(Zones/Point[fromZone], Zones/Point[toZone]))";
			parameter<float32> maxdist:			expr = "max_dist";
			parameter<float32> Dist:			expr = "sum(length)";
			parameter<float32> this_k:			expr = "power";
			parameter<float32> this_r_value:	expr = "routing_value";
			parameter<bool>	   respects_maxdist:expr = "dist <= maxdist";
		}
	}
}