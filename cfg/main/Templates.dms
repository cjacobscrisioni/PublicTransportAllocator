Container Templates {

	//unit<dpoint> CoordSys: 			expr = "CoordSys";
	unit<wpoint> StandardRaster: 	expr = "SourceData/PopulationGrid";
	
	parameter<string> General_indicator: expr = "'General'";
	
	Template loadDataFile_polyshp {
		parameter<string> 	inPath;
		unit<wpoint> 		TargetRaster: expr = "StandardRaster";
		
		attribute<inFile> RasterIds (TargetRaster): expr = "poly2grid(inFile/Geometry, TargetRaster)";
		//unit<uint32> inFile: StorageName = "= '%AfricaSourceDataDir%/data/'+inPath+'.shp'", StorageType = "gdal.vect", StorageReadOnly = "True", DialogData = "Geometry", DialogType = "map"
		unit<uint32> inFile: StorageName = "= inPath+'.shp'", StorageType = "gdal.vect", StorageReadOnly = "True", DialogData = "Geometry", DialogType = "map"
		{
			attribute<CoordSys> Geometry (poly);
		}
	}
	Template loadDataFile_arc {
		parameter<string> 	inPath;
		unit<uint32>		PopPoints;
		
		parameter<bool> ShapePresent: expr = "ExistingFile('x:/x', inPath+'.shp') <> 'x:/x'";
	
		//unit<uint32> inFile: StorageName = "= '%AfricaSourceDataDir%/data/'+inPath+'.shp'", StorageType = "gdal.vect", StorageReadOnly = "True", DialogData = "Geometry", DialogType = "map"
		unit<uint32> inFile: StorageName = "= inPath+'.shp'", StorageType = "gdal.vect", StorageReadOnly = "True", DialogData = "Geometry", DialogType = "map"
		{
			attribute<CoordSys> Geometry (arc);
			attribute<uint32> 	Step;
			attribute<float32>	length: 		expr = "float32(arc_length(Geometry, float64))";
			attribute<PopPoints>fromPopPoint: 	expr = "rlookup(first_node(Geometry), PopPoints/point)";	
			attribute<PopPoints>toPopPoint: 	expr = "rlookup(last_node(Geometry), PopPoints/point)";	
			attribute<Steps>	StepId:			expr = "rlookup(Step, Steps/Values)"; 
			attribute<float32>	cumuPop:		expr = "Steps/cumuPop[StepId]";
			attribute<float32>  cumuSharePop:	expr = "Steps/cumuSharePop[StepId]";
			attribute<float32>	fromHDC:		expr = "float32(PopPoints/inHDC[fromPopPoint])";
			attribute<float32>	toHDC:			expr = "float32(PopPoints/inHDC[toPopPoint])";
			attribute<float32>	HDClength:		expr = "0.5f * ((length * fromHDC) +  (length * toHDC))";
		}
		container Statistics:	expr = "= ShapePresent ? 'RealStatistics' : 'SpoofStatistics'";
		container SpoofStatistics 	{parameter<float32> length: expr = "float32(0 / 0)";parameter<uint32> maxstep: expr = "uint32(0)";parameter<float32> length_inHDC: expr = "0f";parameter<float32> connpop: expr = "0f";parameter<float32> connpop_hdc: expr = "0f";}
		container RealStatistics 	{parameter<float32> length: expr = "sum(inFile/length)";parameter<uint32> maxstep: expr = "max(infile/step)"; parameter<float32> length_inHDC: 	expr = "sum(inFile/HDClength)"; parameter<float32> connpop: expr = "sum(conn * float32(PopPoints/Pop))";	parameter<float32> ConnPop_hdc: expr = "sum(conn * float32(PopPoints/Pop) * float32(PopPoints/inHDC))";}
		
		attribute<float32> 	conn		(PopPoints): expr = "float32(IsDefined(invert(inFile/fromPopPoint)) || IsDefined(invert(inFile/toPopPoint)))";
		attribute<uint32> 	firstStep 	(PopPoints): expr = "uint32(min_elem(min(inFile/Step, inFile/fromPopPoint), min(inFile/Step, inFile/toPopPoint)))";
		attribute<Steps>  	StepId		(PopPoints): expr = "rlookup(firstStep, Steps/Values)";
		
		unit<uint32> Steps: expr = "unique(inFile/Step)" {
			attribute<float32> Pop: 		expr = "max_elem(sum(float32(PopPoints/Pop), StepId), 0f)";
			attribute<float32> cumuPop: 	expr = "cumulate(Pop)";
			attribute<float32> cumuSharePop:expr = "cumuPop / float32(sum(PopPoints/Pop))";
			attribute<float32> length:		expr = "sum(inFile/length, inFile/StepId)";
			attribute<float32> cumuLength:	expr = "cumulate(length)";
			attribute<float32> inHDC:		expr = "sum(inFile/HDClength, inFile/StepId)";
			attribute<float32> cumuinHDC:	expr = "cumulate(inHDC)";
		}
	}
	Template loadDataFile_uint8tiff {
		parameter<string> 	inPath;
		unit<wpoint> 		TargetRaster: expr = "StandardRaster";
		//unit<wpoint>		inFile: StorageName = "= '%AfricaSourceDataDir%/data/'+inPath+'.tif'", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "CoordSys", DialogType = "map"
		unit<wpoint>		inFile: StorageName = "= inPath+'.tif'", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "CoordSys", DialogType = "map"
		{
			attribute<uint8> GridData;
			attribute<uint8> ReadData (TargetRaster);
		}
	}
	Template loadDataFile_int16tiff {
		parameter<string> 	inPath;
		unit<wpoint> 		TargetRaster: expr = "StandardRaster";
		unit<wpoint>		inFile: StorageName = "= inPath+'.tif'", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "CoordSys", DialogType = "map"
		{
			attribute<int16> GridData;
			attribute<int16> ReadData (TargetRaster);
		}
	}
	Template loadDataFile_int32tiff {
		parameter<string> 	inPath;
		unit<wpoint> 		TargetRaster: expr = "StandardRaster";
		unit<wpoint>		inFile: StorageName = "= inPath+'.tif'", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "CoordSys", DialogType = "map"
		{
			attribute<int32> GridData;
			attribute<int32> ReadData (TargetRaster);
		}
	}
	Template loadDataFile_float32tiff {
		parameter<string> 	inPath;
		unit<wpoint> 		TargetRaster: expr = "StandardRaster";
		unit<wpoint>		inFile: StorageName = "= inPath+'.tif'", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "CoordSys", DialogType = "map"
		{
			attribute<float32> GridData;
			attribute<float32> ReadData (TargetRaster);
		}
	}
	Template loadDataFile_csv {
		parameter<string> 	inPath;
		unit<uint32> 	 	TargetUnit: expr = "Geometries/Country";
		parameter<string> 	ZoneIdField: expr = "'ZoneId'";		
		parameter<string> 	FieldSeparator := ',';
		
		unit<uint32> 		Domain: expr = "range(uint32, 0, #TargetUnit * 2)";
		
		parameter<string> FileData:  StorageType = "str",  StorageName = "=inPath+'.csv'";
		parameter<string> HeaderLine := readLines(FileData, void, 0);
		parameter<bool>   HeaderOK   := 
			  regex_match(
				  HeaderLine
				 ,'\"[^\"]*+\"(;\"[^\"]*+\")*+'
			  );
				
		unit<uint32> Field:= Range(UInt32, 0, strcount(HeaderLine, FieldSeparator)+1)
		{attribute<string> Name := ReadArray(HeaderLine, Field, String, 0);}
				
		attribute<string> BodyLines(Domain) := readLines(FileData, Domain, HeaderLine/ReadPos); //,  IntegrityCheck = "HeaderOK";
		attribute<bool> LinesAreSignedIntegerStringOrEmpy (Domain) := 
			  regex_match(BodyLines,'(-?+[0-9]++|\"[^\"]*+\")?+(;(-?+[0-9]++|\"[^\"]*+\")?+)*+');
				
		container Data := for_each_nedv(Field/Name,'ReadElems(BodyLines,string,'+ MakeDefined(Field/Name[ID(Field)-1]+'/ReadPos','const(0,Domain)')+')',Domain,string);
		
		// General Domain modification: if there is a row with, as zone id, the term as specified in General_indicator, the final data takes the general row values if no zone-specific value is found.
		// Thus, to add any zone-specific exceptions, make a new row in the csv with as zone id the unique zone identifier of that zone. 
		unit<uint32> General_Domain: expr = "= 'subset(Data/'+ ZoneIdField + ' = General_indicator)'";
		container General_Data: expr = "for_each_nedv(Field/Name, 'Data/'+Field/Name+'[General_Domain/Nr_OrgEntity]',General_Domain,string)";
		parameter<bool> General_Domain_Available: expr = "#General_Domain > 0";
		
		attribute<Domain> DomainRefField (TargetUnit): expr = "= 'rlookup(trim(UpperCase(TargetUnit/ZoneId)), trim(UpperCase(Data/'+ ZoneIdField +')))'";
		
		container inFile: expr = "for_each_nedv(Field/Name, 'IsNull(DomainRefField) && General_Domain_Available ? General_Data/'+Field/Name+'[0] : Data/'+Field/Name+'[DomainRefField]',TargetUnit,string)";
	}
	Template TableComposer_uint32
	{
	   unit<uint32> context:= ExportDomain;
	   parameter<String> FileName       := '%LocalDataProjDir%/dist.csv';
	   // ExportDomain is a domain unit 
	   // with two attributes as subitems configured: id & Dist
	   parameter<String> Fieldlist      := 'id;Dist';
	   parameter<String> FieldSeparator := ';';
	   

	   unit<uint32> Field := range(uint32,0,strcount(Fieldlist,';')+1)
	   {
		  attribute<string> Name := ReadArray(FieldList,.,string,0);
	   }
	   parameter<string> NewLine := '\n';
	   parameter<String> Header  := FieldList;
	   attribute<String> Body (context) :=
		  =AsList(
			 +'String(context/'+Field/Name+')',' + '+Quote(FieldSeparator)+' +'
		  );
	  
	   parameter<String> Result:= Header + NewLine + AsList(Body, NewLine)
	   ,  StorageName = "=FileName"
	   ,  StorageType = "str";
	}
	Template TableComposer_uint64
	{
	   unit<uint64> context:= ExportDomain;
	   container RefFields;
	   parameter<String> FileName       := '%LocalDataProjDir%/dist.csv';
	   // ExportDomain is a domain unit 
	   // with two attributes as subitems configured: id & Dist
	   parameter<String> Fieldlist      := 'id;Dist';
	   parameter<String> FieldSeparator := ';';

	   unit<uint32> Field := range(uint32,0,strcount(Fieldlist,';')+1)
	   {
		  attribute<string> Name := ReadArray(FieldList,.,string,0);
	   }
	   parameter<string> NewLine := '\n';
	   parameter<String> Header  := FieldList;
	   attribute<String> Body (context) :=
		  =AsList(
			 +'String(RefFields/'+Field/Name+')',' + '+Quote(FieldSeparator)+' +'
		  );
	  
	   parameter<String> Result:= Header + NewLine + AsList(Body, NewLine)
	   ,  StorageName = "=FileName"
	   ,  StorageType = "str";
	}
	Template PrepareSuitabilityRules {
		
		container LoadedSuitabilityFile;
		parameter<uint32> SelZoneRef;
		
		unit<uint32> AllFields: 		expr = "LoadedSuitabilityFile/Field" {attribute<MetaData/AllFactors> FactorRef: expr = "rlookup(Name, MetaData/AllFactors/Name)";}
		unit<uint32> RelevantFields: 	expr = "subset(!IsNull(AllFields/FactorRef))" {
			attribute<string> 	Name:		expr = "AllFields/Name[Nr_OrgEntity]";
			attribute<MetaData/AllFactors> FactorRef: expr = "AllFields/FactorRef[Nr_OrgEntity]";
			attribute<string> 	FactorDef: 	expr = "'float32('+ MetaData/AllFactors/Ref[FactorRef] +')'";
			attribute<float32>	FactorVal:	expr = "= 'union_data(., '+AsItemList('float32(LoadedSuitabilityFile/inFile/'+ Name +'[SelZoneRef])')+')'";
			attribute<string> 	Rule:		expr = "'(float32('+string(FactorVal)+') * ' + FactorDef + ')'";
		}
		
		parameter<string> EvalSuitability: expr = "AsItemList(RelevantFields/Rule)";
		
	}
}